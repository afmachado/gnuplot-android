# define GNUPLOT_ALLOC_H
 * and redefines free if necessary.
/* dont define CHECK_HEAP_USE on a FARALLOC machine ! */
# define free(x) checked_free(x)
# define CHECK_POINTER(block, p) check_pointer_in_block(block, p, sizeof(*p), __FILE__, __LINE__)
# define START_LEAK_CHECK() start_leak_check(__FILE__, __LINE__)
# define END_LEAK_CHECK() end_leak_check(__FILE__, __LINE__)
# define CHECK_POINTER(block, p) /*nowt*/
# define START_LEAK_CHECK() /*nowt*/
# define END_LEAK_CHECK() /*nowt*/
#if defined(MSDOS) && defined(__TURBOC__) && !defined(DOSX286) || defined(_Windows) && !defined(WIN32)
#define FARALLOC
#define free gpfree
# define ANSI_CHECK_H
# if defined(__STDC__) && __STDC__
#   define ANSI_C
#  if defined(ANSI_C) || defined(__TURBOC__) || defined (__PUREC__) || defined (__ZTC__) || defined (_MSC_VER) || (defined(OSK) && defined(_ANSI_EXT))
#    define PROTOTYPES
#     define HAVE_STRINGIZE
#   define const
 * standard headers define it. It's not as if the defn is
#  define __PROTO(proto) proto
#  define __PROTO(proto) ()
#  define generic void
#define GNUPLOT_AXIS_H
/* typedefs / #defines */
#define FIRST_AXES 0
#define SECOND_AXES 4
#define NO_AXIS 99
# define AXIS_ARRAY_SIZE 11
    TIC_SERIES,			/* user-defined series */
    TIC_USER,			/* user-defined points */
#define NO_TICS        0
#define TICS_ON_BORDER 1
#define TICS_ON_AXIS   2
#define TICS_MASK      3
#define TICS_MIRROR    4
#define GRID_OFF    0
#define GRID_X      (1<<0)
#define GRID_Y      (1<<1)
#define GRID_Z      (1<<2)
#define GRID_X2     (1<<3)
#define GRID_Y2     (1<<4)
#define GRID_MX     (1<<5)
#define GRID_MY     (1<<6)
#define GRID_MZ     (1<<7)
#define GRID_MX2    (1<<8)
#define GRID_MY2    (1<<9)
#define GRID_CB     (1<<10)
#define GRID_MCB    (1<<11)
#define RANGE_WRITEBACK 1
#define RANGE_REVERSE   2
#define DEFAULT_AXIS_TICDEF {TIC_COMPUTED, NULL, {TC_DEFAULT, 0, 0}, {NULL, {0,0}, FALSE},  { character, character, character, 0., 0., 0. }, FALSE }
# define DEFAULT_AXIS_ZEROAXIS {0, -3, 0, 1.0, 1.0, 0}
#define DEFAULT_AXIS_STRUCT {						    \
#define DEF_FORMAT "% g"
#define TIMEFMT "%d/%m/%y,%H:%M"
#define X_AXIS axis_array[x_axis]
#define Y_AXIS axis_array[y_axis]
#define Z_AXIS axis_array[z_axis]
#define CB_AXIS axis_array[COLOR_AXIS]
#define AXIS_MAP(axis, variable)		\
#define AXIS_MAPBACK(axis, pos)						   \
#define map_x(x) AXIS_MAP(x_axis, x)
#define map_y(y) AXIS_MAP(y_axis, y)
#define AXIS_SETSCALE(axis, out_low, out_high)			\
#define AXIS_WRITEBACK(axis)			\
#define AXIS_DO_LOG(axis,value) (log(value) / axis_array[axis].log_base)
#define AXIS_UNDO_LOG(axis,value) exp((value) * axis_array[axis].log_base)
#define AXIS_LOG_VALUE(axis,value)				\
#define AXIS_DE_LOG_VALUE(axis,coordinate)				  \
#define AXIS_INIT3D(axis, islog_override, infinite)			\
#define AXIS_INIT2D(axis, infinite)					\
#define AXIS_INIT2D_REFRESH(axis, infinite)				\
#define AXIS_UPDATE2D_REFRESH(axis)					\
#define CHECK_REVERSE(axis) do {					\
#define AXIS_ACTUAL_MIN(axis)				\
#define AXIS_ACTUAL_MAX(axis)				\
#define SAVE_WRITEBACK_ALL_AXES					\
#define PARSE_RANGE(axis)						   \
#define PARSE_NAMED_RANGE(axis, dummy_token)				     \
#define GET_NUMBER_OR_TIME(store,axes,axis)				\
#define GET_NUM_OR_TIME(store,axis)			\
#define STORE_WITH_LOG_AND_UPDATE_RANGE(STORE, VALUE, TYPE, AXIS,	  \
#define COLOR_STORE_WITH_LOG_AND_UPDATE_RANGE(STORE, VALUE, TYPE, AXIS,	  \
/* #define NOOP (0) caused many warnings from gcc 3.2 */
#define NOOP ((void)0)
#define INIT_AXIS_ARRAY(field, value)		\
#define AXIS_ARRAY_INITIALIZER(value) {			\
#define SET_DEFFORMAT(axis, flag_array)				\
#define SIGNIF (0.01)
#define CheckZero(x,tic) (fabs(x) < ((tic) * SIGNIF) ? 0.0 : (x))
#define NEED_PALETTE(plot) \
# define GNUPLOT_BINARY_H
# define GNUPLOT_BITMAP_H
#define FNT_CHARS   96		/* Number of characters in the font set */
#define FNT5X9 0
#define FNT5X9_VCHAR 11		/* vertical spacing between characters */
#define FNT5X9_VBITS 9		/* actual number of rows of bits per char */
#define FNT5X9_HCHAR 7		/* horizontal spacing between characters */
#define FNT5X9_HBITS 5		/* actual number of bits per row per char */
#define FNT9X17 1
#define FNT9X17_VCHAR 21	/* vertical spacing between characters */
#define FNT9X17_VBITS 17	/* actual number of rows of bits per char */
#define FNT9X17_HCHAR 13	/* horizontal spacing between characters */
#define FNT9X17_HBITS 9		/* actual number of bits per row per char */
#define FNT13X25 2
#define FNT13X25_VCHAR 31	/* vertical spacing between characters */
#define FNT13X25_VBITS 25	/* actual number of rows of bits per char */
#define FNT13X25_HCHAR 19	/* horizontal spacing between characters */
#define FNT13X25_HBITS 13	/* actual number of bits per row per char */
# define GNUPLOT_BINEDF_H
Here we define structures which are required for the communication
#define COLOR_H
#define	TC_DEFAULT	0	/* Use default color, set separately */
#define	TC_LT		1	/* Use the color of linetype <n> */
#define	TC_LINESTYLE	2	/* Use the color of line style <n> */
#define	TC_RGB		3	/* Explicit RGB triple provided by user */
#define	TC_CB		4	/* "palette cb <value>" */
#define	TC_FRAC		5	/* "palette frac <value> */
#define	TC_Z		6	/* "palette z" */
#define DEFAULT_COLORSPEC {TC_DEFAULT, 0, 0.0}
#define BLACK_COLORSPEC {TC_LT, LT_BLACK, 0.0}
    SMPAL_COLOR_MODE_FUNCTIONS = 'f', /* user defined transforms */
				       * explicitly defined or read from file */
#define SMPAL_NEGATIVE  'n'
#define SMPAL_POSITIVE  'p'
  /* These variables are used to define interpolated color palettes:
# define GNUPLOT_COMMAND_H
#define END_OF_COMMAND (c_token >= num_tokens || equals(c_token,";"))
#define PAUSE_BUTTON1   001		/* Mouse button 1 */
#define PAUSE_BUTTON2   002		/* Mouse button 2 */
#define PAUSE_BUTTON3   004		/* Mouse button 3 */
#define PAUSE_CLICK	007		/* Any button click */
#define PAUSE_KEYSTROKE 010		/* Any keystroke */
#define PAUSE_WINCLOSE	020		/* Window close event */
#define PAUSE_ANY       077		/* Terminate on any of the above */
# define STDOUT 1
#if defined(MSDOS) || defined(DOS386)
# define SET_CURSOR_WAIT SetCursor(LoadCursor((HINSTANCE) NULL, IDC_WAIT))
# define SET_CURSOR_ARROW SetCursor(LoadCursor((HINSTANCE) NULL, IDC_ARROW))
# define SET_CURSOR_WAIT        /* nought, zilch */
# define SET_CURSOR_ARROW       /* nought, zilch */
#define bind_command()
void undefine_command __PROTO((void));
void define __PROTO((void));
# define GNUPLOT_CONTOUR_H
/* #if... / #include / #define collection: */
#define DEFAULT_CONTOUR_LEVELS 5
#define DEFAULT_NUM_APPROX_PTS 5
#define DEFAULT_CONTOUR_ORDER  4
#define MAX_BSPLINE_ORDER      10
#define contour_levels_list ((double *)dyn_contour_levels_list.v)
# define GNUPLOT_DATAFILE_H
/* #if... / #include / #define collection: */
#define DF_EOF          (-1)
#define DF_UNDEFINED    (-2)
#define DF_FIRST_BLANK  (-3)
#define DF_SECOND_BLANK (-4)
#define DF_MISSING      (-5)
#define DF_FOUND_KEY_TITLE   (-6)
#define DF_KEY_TITLE_MISSING (-7)
#define DF_STRINGDATA	(-8)
#ifndef MAXINT			/* should there be one already defined ? */
#  define MAXINT INT_MAX
#  define MAXINT ((~0)>>1)
#define MAXDATACOLS 7
#define DF_DEFAULT_TYPE DF_FLOAT
#define SIGNED_TEST(val) ((val)==sizeof(long) ? DF_LONG : \
#define UNSIGNED_TEST(val) ((val)==sizeof(unsigned long) ? DF_ULONG : \
#define FLOAT_TEST(val) ((val)==sizeof(float) ? DF_FLOAT : \
 * the user has issued "set datafile" to define defaults.
#define df_set_skip_after(col,bytes) df_set_skip_before(col+1,bytes)  /* Number of bytes to skip after a binary column. */
# define DYNARRAY__H
# define GNUPLOT_EVAL_H
/* #if... / #include / #define collection: */
#define STACK_DEPTH 100		/* maximum size of the execution stack */
#define MAX_AT_LEN 150		/* max number of entries in action table */
#define is_jump(operator) \
/* user-defined function table entry */
/* user-defined variable table entry */
    TBOOLEAN udv_undef;		/* true if not defined yet */
extern TBOOLEAN undefined;
#define GNUPLOT_FIT_H
/* #if... / #include / #define collection: */
#define STANDARD stderr
#define BACKUP_SUFFIX ".old"
#define Eex(a)	    {sprintf (fitbuf+9, (a));         error_ex ();}
#define Eex2(a,b)   {sprintf (fitbuf+9, (a),(b));     error_ex ();}
#define Eex3(a,b,c) {sprintf (fitbuf+9, (a),(b),(c)); error_ex ();}
/* NEW 20030131: should we place parameter errors into user-defined
# define GNUPLOT_GADGETS_H
/* #if... / #include / #define collection: */
#define PTSZ_DEFAULT    (-2)
#define PTSZ_VARIABLE   (-3)
#define EMPTY_LABELSTRUCT \
#define OBJ_RECTANGLE (1)
#define OBJ_CIRCLE (2)
#define OBJ_ELLIPSE (3)
#define OBJ_POLYGON (4)
   left/right/center with top/bottom/center can only define 9
#define EMPTY_FILLEDCURVES_OPTS { 0, 0, 0.0, 0.0, 0 }
#define DEFAULT_HISTOGRAM_STYLE { HT_NONE, 2, 1, 0.0, 0.0, LT_UNDEFINED, LT_UNDEFINED, 0, NULL, EMPTY_LABELSTRUCT }
/* Variables defined by gadgets.c needed by other modules. */
# define DEFAULT_KEYBOX_LP { 0, LT_NODRAW, 0, 1.0, 1.0, 0 }
#define DEFAULT_KEY_POSITION { graph, graph, graph, 0.9, 0.9, 0. }
#define DEFAULT_KEY_PROPS \
#define SMCOLOR_BOX_NO      'n'
#define SMCOLOR_BOX_DEFAULT 'd'
#define SMCOLOR_BOX_USER    'u'
#define DEFAULT_MARGIN_POSITION {character, character, character, -1, -1, -1}
# define DEFAULT_TIMESTAMP_FORMAT "%a %b %d %H:%M:%S %Y"
#define ZERO 1e-8		/* default for 'zero' set option */
#define SOUTH		1 /* 0th bit */
#define WEST		2 /* 1th bit */
#define NORTH		4 /* 2th bit */
#define EAST		8 /* 3th bit */
#define border_east	(draw_border & EAST)
#define border_west	(draw_border & WEST)
#define border_south	(draw_border & SOUTH)
#define border_north	(draw_border & NORTH)
#define border_complete	((draw_border & 15) == 15)
#define SAMPLES 100		/* default number of samples for a plot */
#define ALMOST2D      \
#define refresh_ok FALSE
#define LAYER_BEHIND     -1
#define LAYER_BACK        0
#define LAYER_FRONT       1
#define LAYER_PLOTLABELS 99
#define DEFAULT_RECTANGLE_STYLE { NULL, -1, 0, OBJ_RECTANGLE,	\
#define DEFAULT_CIRCLE_STYLE { NULL, -1, 0, OBJ_CIRCLE,       \
#define DEFAULT_ELLIPSE_STYLE { NULL, -1, 0, OBJ_CIRCLE,       \
#define DEFAULT_POLYGON_STYLE { NULL, -1, 0, OBJ_POLYGON,       \
#define GETCOLOR_H
#define GPEXECUTE_H
#define INCL_DOSPROCESS
#define INCL_DOSSEMAPHORES
#if defined(PIPE_IPC) || defined(WIN_IPC)
# define GNUPLOT_HISTORY_H
#if defined(HAVE_LIBEDITLINE)
#if defined(READLINE) && !defined(HAVE_LIBREADLINE) && !defined(HAVE_LIBEDITLINE)
#elif defined(HAVE_LIBREADLINE) || defined(HAVE_LIBEDITLINE)
#define GNUPLOT_GPLT_X11_H
#if defined(HAVE_SYS_SELECT_H) && !defined(VMS)
# define FD_SET(n, p)    ((p)->fds_bits[0] |= (1 << ((n) % 32)))
# define FD_CLR(n, p)    ((p)->fds_bits[0] &= ~(1 << ((n) % 32)))
# define FD_ISSET(n, p)  ((p)->fds_bits[0] & (1 << ((n) % 32)))
# define FD_ZERO(p)      memset((char *)(p), '\0', sizeof(*(p)))
#define X11_COMMAND_BUFFER_LENGTH 1024
#define ENDIAN_VALUE 0x50515253
#define X11_GR_CHECK_ENDIANESS  'B'
#define X11_GR_MAKE_PALETTE     'p'
#define X11_GR_RELEASE_PALETTE  'e'
#define X11_GR_SET_COLOR        'k'
#define X11_GR_BINARY_COLOR     'c'
#define X11_GR_SET_RGBCOLOR     'g'
#define X11_GR_SET_LINECOLOR    'l'
#define X11_GR_FILLED_POLYGON   'I'
#define X11_GR_BINARY_POLYGON   'f'
#define X11_GR_IMAGE		'i'
#define X11_GR_SET_WINDOW_ID    'w'
#define BINARY_MAX_CHAR_PER_TRANSFER (X11_COMMAND_BUFFER_LENGTH-3)
#define SET_COLOR_CODE_CHAR      5
#define FILLED_POLYGON_CODE_CHAR 5
#define IMAGE_CODE_CHAR          1
#define SET_COLOR_TRANSLATION_CHAR         3
#define FILLED_POLYGON_TRANSLATION_CHAR  -13
#define IMAGE_TRANSLATION_CHAR            45
#define IMAGE_PALETTE_VALUE_MAX USHRT_MAX
# define GNUPLOT_GP_TIME_H
/* #if... / #include / #define collection: */
/* defines used for timeseries, seconds */
#define ZERO_YEAR	2000
#define JAN_FIRST_WDAY 6  /* 1st jan, 2000 is a Saturday (cal 1 2000 on unix) */
#define SEC_OFFS_SYS	946684800.0		/*  zero gnuplot (2000) - zero system (1970) */
#define YEAR_SEC	31557600.0	/* avg, incl. leap year */
#define MON_SEC		2629800.0	/* YEAR_SEC / 12 */
#define WEEK_SEC	604800.0
#define DAY_SEC		86400.0
#define GNUPLOT_GPTYPES_H
#define MAX_ID_LEN 50		/* max length of an identifier */
#define MAX_LINE_LEN 1024	/* maximum number of chars allowed on line */
#define DEG2RAD (M_PI / 180.0)
    OUTRANGE,			/* outside plot boundary, but defined */
    UNDEFINED			/* not defined at all */
#define CRD_COLOR ylow
#define CRD_R yhigh
#define CRD_G xlow
#define CRD_B xhigh
#define CRD_A ylow
#define CRD_PTSIZE xlow
#if defined(WIN16) || (defined(MSDOS) && defined(__TURBOC__))
# define GNUPLOT_GRAPH3D_H
/* #if... / #include / #define collection: */
#define map_x3d(x) ((x-X_AXIS.min)*xscale3d + xcenter3d -1.0)
#define map_y3d(y) ((y-Y_AXIS.min)*yscale3d + ycenter3d -1.0)
#define map_z3d(z) ((z-floor_z)*zscale3d + zcenter3d -1.0)
#define ISO_SAMPLES 10		/* default number of isolines per splot */
# define GNUPLOT_GRAPHICS_H
/* types defined for 2D plotting */
#if defined(sun386) || defined(AMIGA_SC_6_1)
#define place_objects(listhead,layer,dimensions,clip_area) /* void() */
# define GNUPLOT_HELP_H
#define	H_FOUND		0	/* found the keyword */
#define	H_NOTFOUND	1	/* didn't find the keyword */
#define	H_ERROR		(-1)	/* didn't find the help file */
# define GNUPLOT_HIDDEN3D_H
/* #if... / #include / #define collection: */
# define GNUPLOT_INTERNAL_H
/* #if... / #include / #define collection: */
# define GNUPLOT_INTERPOL_H
/* #if... / #include / #define collection: */
#define MATRIX_H
# define GNUPLOT_MISC_H
    struct lf_state_struct *prev;			/* defines a stack */
# define MOUSECMN_H
    GE_keypress,        /* keypress; par1 = keycode (either ASCII, or one of the GP_ enums defined below); par2 = ( |1 .. don't pass through bindings )*/
    GE_reset            /* reset to a well-defined state
#if defined(PIPE_IPC) || defined(WIN_IPC)
#define _HAVE_MOUSE_H
#if defined(_MOUSE_C)
# define GNUPLOT_NATIONAL_H
#define AMON01 "Jan"
#define AMON02 "Feb"
#define AMON03 "Mar"
#define AMON04 "Apr"
#define AMON05 "Mai"
#define AMON06 "Jun"
#define AMON07 "Jul"
#define AMON08 "Aug"
#define AMON09 "Sep"
#define AMON10 "Okt"
#define AMON11 "Nov"
#define AMON12 "Des"
#define FMON01 "January"
#define FMON02 "February"
#define FMON03 "March"
#define FMON04 "April"
#define FMON05 "May"
#define FMON06 "June"
#define FMON07 "July"
#define FMON08 "August"
#define FMON09 "September"
#define FMON10 "October"
#define FMON11 "November"
#define FMON12 "December"
#define ADAY0 "Sxn"
#define ADAY1 "Man"
#define ADAY2 "Tir"
#define ADAY3 "Ons"
#define ADAY4 "Tor"
#define ADAY5 "Fre"
#define ADAY6 "Lxr"
#define FDAY0 "Sunday"
#define FDAY1 "Monday"
#define FDAY2 "Tuesday"
#define FDAY3 "Wednesday"
#define FDAY4 "Thursday"
#define FDAY5 "Friday"
#define FDAY6 "Saturday"
#elif defined(HUNGARIAN)
#define AMON01 "jan"
#define AMON02 "febr"
#define AMON03 "m&aacute;rc"
#define AMON04 "&aacute;pr"
#define AMON05 "m&aacute;j"
#define AMON06 "j&uacute;n"
#define AMON07 "j&uacute;l"
#define AMON08 "aug"
#define AMON09 "szept"
#define AMON10 "okt"
#define AMON11 "nov"
#define AMON12 "dec"
#define FMON01 "janu&aacute;r"
#define FMON02 "febru&aacute;r"
#define FMON03 "m&aacute;rcius"
#define FMON04 "&aacute;prilis"
#define FMON05 "m&aacute;jus"
#define FMON06 "j&uacute;nius"
#define FMON07 "j&uacute;lius"
#define FMON08 "augusztus"
#define FMON09 "szeptember"
#define FMON10 "okt&oacute;ber"
#define FMON11 "november"
#define FMON12 "december"
#define ADAY0 "vas"
#define ADAY1 "h&eacute;t"
#define ADAY2 "kedd"
#define ADAY3 "sze"
#define ADAY4 "cs&uuml;t"
#define ADAY5 "p&eacute;n"
#define ADAY6 "szo"
#define FDAY0 "vas&aacute;rnap"
#define FDAY1 "h&eacute;tf&otilde;"
#define FDAY2 "kedd"
#define FDAY3 "szerda"
#define FDAY4 "cs&uacute;t&ouml;rt&ouml;k"
#define FDAY5 "p&eacute;ntek"
#define FDAY6 "szombat"
#define AMON01 "Jan"
#define AMON02 "Feb"
#define AMON03 "Mar"
#define AMON04 "Apr"
#define AMON05 "May"
#define AMON06 "Jun"
#define AMON07 "Jul"
#define AMON08 "Aug"
#define AMON09 "Sep"
#define AMON10 "Oct"
#define AMON11 "Nov"
#define AMON12 "Dec"
#define FMON01 "January"
#define FMON02 "February"
#define FMON03 "March"
#define FMON04 "April"
#define FMON05 "May"
#define FMON06 "June"
#define FMON07 "July"
#define FMON08 "August"
#define FMON09 "September"
#define FMON10 "October"
#define FMON11 "November"
#define FMON12 "December"
#define ADAY0 "Sun"
#define ADAY1 "Mon"
#define ADAY2 "Tue"
#define ADAY3 "Wed"
#define ADAY4 "Thu"
#define ADAY5 "Fri"
#define ADAY6 "Sat"
#define FDAY0 "Sunday"
#define FDAY1 "Monday"
#define FDAY2 "Tuesday"
#define FDAY3 "Wednesday"
#define FDAY4 "Thursday"
#define FDAY5 "Friday"
#define FDAY6 "Saturday"
# define PARSE_H
/* externally usable types defined by parse.h */
# define GNUPLOT_PLOT2D_H
# define GNUPLOT_PLOT3D_H
# define GNUPLOT_PLOT_H
/* #if... / #include / #define collection: */
 * What is here: #defines, global variables and declaration of routines for
#define PM3D_H
  The string pm3d.where can be any combination of the #defines below.
#define PM3D_AT_BASE	'b'
#define PM3D_AT_TOP	't'
#define PM3D_AT_SURFACE	's'
#define PM3D_FLUSH_BEGIN   'b'
#define PM3D_FLUSH_END     'r'
#define PM3D_FLUSH_CENTER  'c'
#define PM3D_SCANS_AUTOMATIC  'a'
#define PM3D_SCANS_FORWARD    'f'
#define PM3D_SCANS_BACKWARD   'b'
#define PM3D_DEPTH            'd'
    PM3D_CLIP_1IN: all 4 points of the quadrangle must be defined and at least
#define PM3D_CLIP_1IN '1'
#define PM3D_CLIP_4IN '4'
# define GNUPLOT_READLINE_H
/* #if... / #include / #define collection: */
#if defined(HAVE_LIBREADLINE)
#if defined(HAVE_LIBEDITLINE)
#if defined(HAVE_LIBEDITLINE)
#if defined(READLINE) && !defined(HAVE_LIBREADLINE) && !defined(HAVE_LIBEDITLINE)
# define GNUPLOT_SAVE_H
/* #if... / #include / #define collection: */
# define GNUPLOT_SCANNER_H
/* #if... / #include / #define collection: */
# define GNUPLOT_SETSHOW_H
#define PROGRAM "G N U P L O T"  /* FIXME: move to show.c! */
#define SAVE_NUM_OR_TIME(fp, x, axis)				\
# define GNUPLOT_SPECFUN_H
/* #if... / #include / #define collection: */
# define GNUPLOT_STANDARD_H
/* #if... / #include / #define collection: */
#define STDFN_H
#  define memcpy(d,s,n) bcopy((s),(d),(n))
#  define memmove(d,s,n) bcopy((s),(d),(n))
#  define strchr index
#  define strrchr rindex
# define strcspn gp_strcspn
#   define EXIT_FAILURE (1)
#   define EXIT_SUCCESS (0)
#   define EXIT_FAILURE  0x10000002
#   define EXIT_SUCCESS  1
#if defined(HAVE_VFPRINTF) || defined(HAVE_DOPRNT)
#  define VA_START(args, lastarg) va_start(args, lastarg)
#  define VA_START(args, lastarg) va_start(args)
# define va_dcl char *a1, char *a2, char *a3, char *a4, char *a5, char *a6, char *a7, char *a8
#  define S_IRUSR S_IREAD
#  define S_IRUSR 00400
#  define S_IWUSR S_IWRITE
#  define S_IWUSR 00200
#  define S_IXUSR S_IEXEC
#  define S_IXUSR 00100
#if !defined(S_ISBLK) && defined(S_IFBLK)
# define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
#if !defined(S_ISCHR) && defined(S_IFCHR)
# define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
#if !defined(S_ISDIR) && defined(S_IFDIR)
# define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
#if !defined(S_ISREG) && defined(S_IFREG)
# define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#if !defined(S_ISFIFO) && defined(S_IFIFO)
# define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
#if !defined(S_ISLNK) && defined(S_IFLNK)
# define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#if !defined(S_ISSOCK) && defined(S_IFSOCK)
# define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
#if !defined(S_ISMPB) && defined(S_IFMPB) /* V7 */
# define S_ISMPB(m) (((m) & S_IFMT) == S_IFMPB)
# define S_ISMPC(m) (((m) & S_IFMT) == S_IFMPC)
#if !defined(S_ISNWK) && defined(S_IFNWK) /* HP/UX */
# define S_ISNWK(m) (((m) & S_IFMT) == S_IFNWK)
/* ctime etc, should also define time_t and struct tm */
# define time_t long
#if defined(PIPES) && (defined(VMS) || (defined(OSK) && defined(_ANSI_EXT))) || defined(PIPES) && defined(AMIGA_SC_6_1)
/* Some older platforms, namely SunOS 4.x, don't define this. */
# define DBL_EPSILON     2.2204460492503131E-16
# define M_PI 3.14159265358979323846
# define M_PI_2 1.57079632679489661923
#  define M_LN10    2.3025850929940456840e0
#if defined(DBL_MIN_10_EXP)
# define E_MINEXP (DBL_MIN_10_EXP * M_LN10)
#if defined(DBL_MAX_10_EXP)
# define E_MAXEXP (DBL_MAX_10_EXP * M_LN10)
#  define strcasecmp stricmp
#  define strcasecmp gp_stricmp
#  define strncasecmp strnicmp
#  define strncasecmp gp_strnicmp
# if defined(HAVE_GETCWD)
#   if defined(__EMX__)
#     define GP_GETCWD(path,len) _getcwd2 (path, len)
#     define GP_GETCWD(path,len) getcwd (path, len)
#  define GP_GETCWD(path,len) getwd (path)
#if defined(HAVE_USLEEP)
#  define GP_SLEEP(delay) usleep((unsigned int) ((delay)*1e6))
#    define HAVE_SLEEP
#elif defined(__EMX__)
#  define GP_SLEEP(delay) _sleep2((unsigned int) ((delay)*1e3))
#    define HAVE_SLEEP
#elif defined(WIN32)
#  define GP_SLEEP(delay) win_sleep((DWORD) 1000*delay)
#    define HAVE_SLEEP
#    define GP_SLEEP(delay) usleep ((unsigned long) (delay+0.5))
#    define GP_SLEEP(delay) sleep ((unsigned int) (delay+0.5))
# define GP_ATEXIT(x) atexit((x))
#elif defined(HAVE_ON_EXIT)
# define GP_ATEXIT(x) on_exit((x),0)
# define GP_ATEXIT(x) /* you lose */
/* Misc. defines */
#define NUL ('\0')
/* #define NDEBUG */
# define DEBUG_WHERE do { fprintf(stderr,"%s:%d ",__FILE__,__LINE__); } while (0)
# define FPRINTF(a) do { DEBUG_WHERE; fprintf a; } while (0)
# define DEBUG_WHERE     /* nought */
# define FPRINTF(a)      /* nought */
#define INT_STR_LEN (3*sizeof(int))
 * DBL_MAX is defined correctly and HUGE and HUGE_VAL are both defined
#if defined ( NEXT ) && NX_CURRENT_COMPILER_RELEASE<310
# if defined ( DBL_MAX)
# define DBL_MAX 1.7976931348623157e+308
# define HUGE    DBL_MAX
# define HUGE_VAL DBL_MAX
 * define VERYLARGE here.
#define VERYLARGE 1e37
 * FLT_MAX on PCs), HUGE or HUGE_VAL. DBL_MAX is usually defined in
/* Now define VERYLARGE. This is usually DBL_MAX/2 - 1. On MS-DOS however
#  define VERYLARGE (DBL_MAX/2-1)
#  define VERYLARGE (FLT_MAX/2-1)
#  define VERYLARGE (HUGE/2-1)
# elif defined(HUGE_VAL)
#  define VERYLARGE (HUGE_VAL/2-1)
#  define VERYLARGE (1e37)
/* #  warning "using last resort 1e37 as VERYLARGE define, please check your headers" */
#  define PATH_MAX 1024
#  define PATH_MAX MAXPATHLEN
#define PATH_CONCAT(path,file) \
# define inrange(z,min,max) \
# define cliptorange(z,min,max)			\
/* both min/max and MIN/MAX are defined by some compilers.
#define GPMAX(a,b) ( (a) > (b) ? (a) : (b) )
#define GPMIN(a,b) ( (a) < (b) ? (a) : (b) )
#define SYSCFG_H
#if defined(AMIGA_SC_6_1) || defined(AMIGA_AC_5) || defined(__amigaos__)
#  define OS "Amiga"
#  define HELPFILE "S:gnuplot.gih"
#  define HOME     "GNUPLOT"
#  define SHELL    "NewShell"
#  define DIRSEP2  ':'
#  define PATHSEP  ';'
#  define AMIGA
#  define S_IFIFO S_IREAD
# define OS       "DOS 386"
# define HELPFILE "gnuplot.gih"
# define HOME     "GNUPLOT"
# define PLOTRC   "gnuplot.ini"
# define SHELL    "\\command.com"
# define DIRSEP1  '\\'
# define PATHSEP  ';'
#if defined(__NeXT__) || defined(NEXT)
#  define NEXT
# define OS       "OS/2"
# define HELPFILE "gnuplot.gih"
# define HOME     "GNUPLOT"
# define PLOTRC   "gnuplot.ini"
# define SHELL    "c:\\os2\\cmd.exe"
# define DIRSEP1  '\\'
# define PATHSEP  ';'
# define GNUPLOT_HISTORY_FILE "~\\gnuplot_history"
# define OS    "OS-9"
# define SHELL "/dd/cmds/shell"
#if defined(vms) || defined(VMS)
# define OS "VMS"
#  define VMS
# define HOME   "sys$login:"
# define PLOTRC "gnuplot.ini"
#  define HELPFILE "GNUPLOT$HELP"
# if !defined(VAXCRTL) && !defined(DECCRTL)
#  define VAXCRTL VAXCRTL_AND_DECCRTL_UNDEFINED
#  define DECCRTL VAXCRTL_AND_DECCRTL_UNDEFINED
#if defined(_WINDOWS) || defined(_Windows)
#  define _Windows
#  define OS "MS-Windows 32 bit"
#  define far
#  define S_IFIFO  _S_IFIFO
#  define OS "MS-Windows"
#   define WIN16
# define HOME    "GNUPLOT"
# define PLOTRC  "gnuplot.ini"
# define SHELL   "\\command.com"
# define DIRSEP1 '\\'
# define PATHSEP ';'
# define GNUPLOT_HISTORY_FILE "~\\gnuplot_history"
#if defined(MSDOS) && !defined(_Windows)
# if !defined(DOS32) && !defined(DOS16)
#  define DOS16
# define OS       "MS-DOS"
# define HELPFILE "gnuplot.gih"
# define HOME     "GNUPLOT"
# define PLOTRC   "gnuplot.ini"
# define SHELL    "\\command.com"
# define DIRSEP1  '\\'
# define PATHSEP  ';'
#  define DIRSEP2 '/'
# define GNUPLOT_HISTORY_FILE "~\\gnuplot.his"
 * for the constants defined above are following.
# define OS "non-recognized OS"
# define HELPFILE "docs/gnuplot.gih"
# define HOME "HOME"
# define PLOTRC ".gnuplot"
# define SHELL "/bin/sh"    /* used if SHELL env variable not set */
# define DIRSEP1 '/'
# define DIRSEP2 NUL
# define PATHSEP ':'
# define __PROTO(proto) proto
# define __PROTO(proto) ()
#if defined(MSDOS) || defined(DOS386)
#  define HAVE_SLEEP 1
#  define P_WAIT 0
# elif defined(__TURBOC__)
#   define HAVE_SLEEP 1
#   define HAVE_SLEEP 1
#  if !defined(__EMX__) && !defined(DJGPP)
# define HAVE_GETCWD 1
# define GP_EXCEPTION_NAME _exception
#  define APOLLO
# define GPR
#if defined(APOLLO) || defined(alliant)
#  define UNIXPC
#if (defined(__TURBOC__) && defined(MSDOS)) || defined(WIN16)
# define GPHUGE huge
# define GPFAR far
# define GPHUGE /* nothing */
# define GPFAR /* nothing */
#if defined(DOS16) || defined(WIN16)
# define COORDVAL_FLOAT 1
/* Set max. number of arguments in a user-defined function */
# define MAX_NUM_VAR	3
# define MAX_NUM_VAR	12
# define DEFAULT_COMMENTS_CHARS "#!"
# define is_system(c) ((c) == '$')
# define BACKUP_FILESYSTEM 1
# define DEFAULT_COMMENTS_CHARS "#"
# define is_system(c) ((c) == '!')
# define RETSIGTYPE void
# define SETJMP(env, save_signals) sigsetjmp(env, save_signals)
# define LONGJMP(env, retval) siglongjmp(env, retval)
# define JMP_BUF sigjmp_buf
# define SETJMP(env, save_signals) setjmp(env)
# define LONGJMP(env, retval) longjmp(env, retval)
# define JMP_BUF jmp_buf
#define generic void
/* FIXME HBB 20010720: Where is SORTFUNC_ARGS supposed to be defined?  */
#define SORTFUNC_ARGS const generic *
# define CONCAT(x,y) x##y
# define CONCAT3(x,y,z) x##y##z
# define CONCAT(x,y) x/**/y
# define CONCAT3(x,y,z) x/**/y/**/z
/* Windows needs to redefine stdin/stdout functions */
#if defined(_Windows) && !defined(WINDOWS_NO_GUI)
# define GP_EXCEPTION_NAME exception
# define GP_MATHERR matherr
# define STRUCT_EXCEPTION_P_X struct GP_EXCEPTION_NAME *x
# define STRUCT_EXCEPTION_P_X /* nothing */
/* if GP_INLINE has not yet been defined, set to __inline__ for gcc,
#  define GP_INLINE __inline__
#  define GP_INLINE /*nothing*/
# define bool _Bool
# define false 0
# define true 1
# define __bool_true_false_are_defined 1
#if defined(__SUNPRO_CC) && !defined(bool)
#define bool unsigned char
#define TRUE true
#define FALSE false
#define TBOOLEAN bool
#define GNUPLOT_TABLES_H
extern const int num_predefined_colors;
extern int num_userdefined_colors;
# define GNUPLOT_TABULATE_H
# define GNUPLOT_TEMPLATE_H
/* #if... / #include / #define collection: */
# define GNUPLOT_TERM_API_H
/* #if... / #include / #define collection: */
#define LT_AXIS       (-1)
#define LT_BLACK      (-2)
#define LT_NODRAW     (-3)
#define LT_BACKGROUND (-4)
#define LT_UNDEFINED  (-5)
#define LT_COLORFROMCOLUMN  (-6)	/* Used by hidden3d code */
#define LT_DEFAULT    (-7)
#define TEXT_VERTICAL (-270)
#define DEFAULT_LP_STYLE_TYPE {0, -2, 0, 0, 1.0, PTSZ_DEFAULT, FALSE, DEFAULT_COLORSPEC}
#define FS_OPAQUE (FS_SOLID + (100<<4))
#define TERM_CAN_MULTIPLOT    1  /* tested if stdout not redirected */
#define TERM_CANNOT_MULTIPLOT 2  /* tested if stdout is redirected  */
#define TERM_BINARY           4  /* open output file with "b"       */
#define TERM_INIT_ON_REPLOT   8  /* call term->init() on replot     */
#define TERM_IS_POSTSCRIPT   16  /* post, next, pslatex, etc        */
#define TERM_ENHANCED_TEXT   32  /* enhanced text mode is enabled   */
#define TERM_NO_OUTPUTFILE   64  /* terminal doesnt write to a file */
#define TERM_CAN_CLIP       128  /* terminal does its own clipping  */
#define TERM_CAN_DASH       256  /* terminal supports dashed lines  */
#define TERM_ALPHA_CHANNEL  512  /* alpha channel transparency      */
#define TERM_MONOCHROME    1024  /* term is running in mono mode    */
#define TERM_LINEWIDTH     2048  /* support for set term linewidth  */
       return value is undefined
# define termentry TERMENTRY far
# define termentry TERMENTRY
#define GP_ENH_EST 1		/* estimate string length of enhanced text */
#define POSTSCRIPT_DRIVER 1	/* include post.trm */
#define PSLATEX_DRIVER 1	/* include pslatex.trm */
#if defined(PSLATEX_DRIVER) && !defined(POSTSCRIPT_DRIVER)
#define POSTSCRIPT_DRIVER
 * to define the macro and list desired terminals in this section.
#if defined(MSDOS) || defined(_Windows) || defined(DOS386)
# if defined(MSDOS) && defined(__EMX__)
#  define EMXVESA
# if defined(DJGPP) && (!defined(DJSVGA) || (DJSVGA != 0))
#   define BGI_NAME "svga256"	/* the name of the SVGA.BGI for Borland C */
 * #if defined(__APPLE__) && defined(__MACH__)
# if defined(VGAGL) && defined (THREEDKIT)
#if !(defined(MSDOS) || defined(_Windows) || defined(AMIGA))
# if defined(UNIXPLOT) || defined(GNUGRAPH)
#if defined(HAVE_GD_PNG) || defined(HAVE_GD_JPEG) || defined(HAVE_GD_GIF)
#define EPSONP
#define EPS60
#define EPS180
#define NEC
#define OKIDATA
#define STARC
#define DPU414
#define TANDY60
#define EMTEX
#define EEPIC
# define GNUPLOT_UTIL3D_H
/* HBB 990828: moved all those variable decl's and #defines to new
#define FLAG_VERTEX_AS_UNDEFINED(v) \
#define VERTEX_IS_UNDEFINED(v) ((v).z == -2.0)
#define V_EQUAL(a,b) ( GE(0.0, fabs((a)->x - (b)->x) + \
#define TERMCOORD(v,xvar,yvar)			\
# define GNUPLOT_UTIL_H
#define NO_CARET (-1)
#define DATAFILE (-2)
#define isstringvalue(c_token) (isstring(c_token) || type_udv(c_token)==STRING)
#if defined(VA_START) && defined(STDC_HEADERS)
# define VARIABLE_H
/* Generic defines */
#define ACTION_NULL   0
#define ACTION_INIT   (1<<0)
#define ACTION_SHOW   (1<<1)
#define ACTION_SET    (1<<2)
#define ACTION_GET    (1<<3)
#define ACTION_SAVE   (1<<4)
#define ACTION_CLEAR  (1<<5)
#define init_loadpath()    loadpath_handler(ACTION_INIT,NULL)
#define set_var_loadpath(path) loadpath_handler(ACTION_SET,(path))
#define get_loadpath()     loadpath_handler(ACTION_GET,NULL)
#define save_loadpath()    loadpath_handler(ACTION_SAVE,NULL)
#define clear_loadpath()   loadpath_handler(ACTION_CLEAR,NULL)
#define init_fontpath()    fontpath_handler(ACTION_INIT,NULL)
#define set_var_fontpath(path) fontpath_handler(ACTION_SET,(path))
#define get_fontpath()     fontpath_handler(ACTION_GET,NULL)
#define save_fontpath()    fontpath_handler(ACTION_SAVE,NULL)
#define clear_fontpath()   fontpath_handler(ACTION_CLEAR,NULL)
#define INITIAL_LOCALE ("C")
#define init_locale()      locale_handler(ACTION_INIT,NULL)
#define set_var_locale(path)   locale_handler(ACTION_SET,(path))
#define get_time_locale()       locale_handler(ACTION_GET,NULL)
#define set_numeric_locale() \
#define reset_numeric_locale() \
#define get_decimal_locale() \
#define set_numeric_locale()
#define reset_numeric_locale()
#define get_decimal_locale() "."
#define GNUPLOT_VERSION_H
